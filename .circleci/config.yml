# CircleCI configuration
version: 2.1

# Slack notification orb
orbs:
  slack: circleci/slack@4.4.2
  aws-ecr: circleci/aws-ecr@7.0.0
  aws-cli: circleci/aws-cli@2.0.3

# CircleCi commands
commands:
  vpc-infra-destroy:
    description: Destroy VPC infrastructure in case of deployment failure
    steps:
      - run:
          name: Destroy vpc infra
          when: on_fail
          command: |
            echo "Destroying vpc infra..."
            aws cloudformation delete-stack --stack-name bcrypt-vpc-infra
            echo "Vpc infra successfully destroyed. For error see build-stage output"


  ecr-infra-destroy:
    description: Destroy ECR infrastructe in case of deployment failure
    steps:
      - run:
          name: Destroy ecr repo
          when: on_fail
          command: |
            echo "Destroying vpc infra..."
            aws cloudformation delete-stack --stack-name bcrypt-ecr-repo
            echo "Ecr repo successfully destroyed. For error see build-stage output"


# Circleci jobs
jobs:
  workflow-start:
    docker: 
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Workflow start command
          command: |
            echo "Start worflow..."
            $WORKFLOWSTART="date -Is"

  app-build:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: build application
          command: |
            cd app
            npm install 
            npm run build
      - save_cache:
          paths: [app/node_modules]
          key: app-build


  lint-check:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [app-build]
      - run:
          name: lint dockerfile using hadolint
          command: |
            sudo wget -O /bin/hadolint https://github.com/hadolint/hadolint/releases/download/v2.5.0/hadolint-Linux-x86_64
            sudo chmod +x /bin/hadolint
            hadolint ./Dockerfile | tee -a hadolint_lint.txt
            lintErrors=$(stat --printf="%s"  hadolint_lint.txt)
            if [ "$lintErrors" -gt "0" ]; then
                echo "Errors have been found, please see below"
                cat hadolint_lint.txt
                exit 1
            else
                echo "There are no erros found on Dockerfile"
            fi
      - run:
          name: lint app using npm
          command: |
            cd app
            npm install
            npm run lint
      - save_cache:
          paths: [app/node_modules]
          key: app-build


  vulnerability-check:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [app-build]
      - run:
          name: vulnerability check on node packages
          command: |
            cd app
            npm install
            npm audit fix
      - save_cache:
          paths: [app/modules]
          key: app-build


  vpc-infra-deploy:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: infrastructure handling for AWS VPC, subnets and networking
          command: |
            chmod +x create_vpc_infra.sh
            ./create_vpc_infra.sh
      - vpc-infra-destroy

  
  ecr-repo-deploy:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Infrastructure handling for AWS ECR repository
          command: | 
            chmod +x create_ecr_infra.sh
            ./create_ecr_infra.sh
      - ecr-infra-destroy


  image-check:
    executor: aws-cli/default
    steps:
      - checkout
      - aws-cli/setup
      - run:
          name: ecr image check
          command: |
            aws ecr describe-images --repository-name udacity-capstone-bcrypt

  
  eks-deploy:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - run:
          name: Install of dependencies for cluster and workers setup - aws cli
          command: | 
            apk add --update tar gzip nodejs npm curl 
            pip install awscli
            aws --version
      - run:
          name: Install of dependencies for cluster and workers setup - iam authenticator
          command: |
            curl -o aws-iam-authenticator https://amazon-eks.s3.us-west-2.amazonaws.com/1.19.6/2021-01-05/bin/linux/amd64/aws-iam-authenticator
            chmod +x ./aws-iam-authenticator
            mkdir -p $HOME/bin && cp ./aws-iam-authenticator $HOME/bin/aws-iam-authenticator && export PATH=$PATH:$HOME/bin
            echo 'export PATH=$PATH:$HOME/bin' >> ~/.bashrc
            aws-iam-authenticator help
      - run:
          name: Install of dependencies for cluster and workers setup - eksctl
          command: |
            curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
            mv /tmp/eksctl /usr/local/bin
            eksctl --help
      - run:
          name: Install of dependencies for cluster and workers setup - kubectl
          command: |
            curl -o kubectl https://amazon-eks.s3.us-west-2.amazonaws.com/1.20.4/2021-04-12/bin/linux/amd64/kubectl
            chmod +x ./kubectl
            mkdir -p $HOME/bin && cp ./kubectl $HOME/bin/kubectl && export PATH=$PATH:$HOME/bin
            echo 'export PATH=$PATH:$HOME/bin' >> ~/.bashrc
            kubectl version --short --client
      - run:
          name: Create cluster and worker nodes
          command: |
            curl -o kubectl https://amazon-eks.s3.us-west-2.amazonaws.com/1.20.4/2021-04-12/bin/linux/amd64/kubectl
            chmod +x ./kubectl
            mkdir -p $HOME/bin && cp ./kubectl $HOME/bin/kubectl && export PATH=$PATH:$HOME/bin
            echo 'export PATH=$PATH:$HOME/bin' >> ~/.bashrc
            kubectl version --short --client
            eksctl create cluster -f ./infrastructure/aws_ekctl_cluster.yaml
            kubectl get svc
      - run:
          name: Update kubectl config 
          command: |
            aws eks --region us-east-1 update-kubeconfig --name EKS-bcrypt-cluster
      - run:
          name: Apply kubectl deploy manifest
          command: |
            kubectl apply -f ./manifest/aws_ekctl_deploy_manifest.yaml
            kubectl get deployments
      - run:
          name: Apply kubectl service manifest
          command: |
            kubectl apply -f ./manifest/aws_ekctl_service_manifest.yaml
            kubectl get services
      - run:
          name: Check kubernetes configuration
          command: |
            kubectl get pods -o wide
            kubectl get nodes -o wide


# Circleci workflow
workflows:
  default:
    jobs:
      - app-build
      - lint-check:
          requires: [app-build]
      - vulnerability-check:
          requires: [app-build]
      - vpc-infra-deploy:
          requires: [lint-check, vulnerability-check]
      - ecr-repo-deploy:
          requires: [lint-check, vulnerability-check]
      - aws-ecr/build-and-push-image:
          repo: udacity-capstone-bcrypt
          requires: [vpc-infra-deploy, ecr-repo-deploy]
      - image-check:
          requires: [aws-ecr/build-and-push-image]
      - eks-deploy:
          requires: [image-check]
